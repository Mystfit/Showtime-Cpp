trigger:
  branches:
    include:
      - master
      - develop
      - azure

variables:
  buildConfiguration: 'Release'
  common_cmake_args: >-
    '-S $(Build.SourcesDirectory)'
    '-DBUILD_SHARED=ON' 
    '-DBUILD_STATIC=ON' 
    '-DBUILD_DRAFTS=OFF' 
    '-DBUILD_TESTING=ON'

stages:
- stage: Build
  pool:
    vmImage: $(imageName)
  jobs:
    - job:
      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-16.04'
            cmake_prefix: '/usr/local'
            platform_cmake_args: >-
              '-G "Unix Makefiles"'
              '-DCMAKE_PREFIX_PATH=$(cmake_prefix)'
          mac:
            imageName: 'macos-10.14'
            cmake_prefix: '/usr/local'
            platform_cmake_args: >-
              '-G "Unix Makefiles"'
              '-DCMAKE_PREFIX_PATH=$(cmake_prefix)'
          windows:
            imageName: 'windows-latest'
            toolset: 'msvc-14.2'
            toolset-platform: 'v142'
            build_dir: '$(Build.ArtifactStagingDirectory)\build'
            solution: '$(build_dir)\Showtime.sln'
            cmake_prefix: '$(build_dir)\dependencies\install\$(toolset)'
            buildPlatform: 'x64'
            platform_cmake_args: >-
              '-G "Unix Makefiles"'
              '-T $(toolset-platform)'
              '-A $(buildPlatform)'
              '-DCMAKE_PREFIX_PATH=$(cmake_prefix)'

      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - task: PowerShell@2
        displayName: Install tools
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          targetType: 'inline'
          script: |
            choco install visualstudio2019-workload-nativedesktop --params "--includeRecommended"
            $VS_path = $(vswhere -format value -property installationPath)
            Write-Host "##vso[task.setvariable variable=VS_path;]$(vswhere -format value -property installationPath)"
            choco install procdump
            Write-Host "##vso[task.setvariable variable=PROCDUMP_PATH ;]%ProgramData%\chocolatey\bin\"

      - task: Bash@3
        displayName: Install dependencies
        condition: ne(variables['Agent.OS'], 'Windows_NT')
        inputs:
          targetType: 'inline'
          workingDirectory: '$(Build.SourcesDirectory)'
          script: |
            brew bundle

      - task: Cache@2
        displayName: Cache dependencies
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          key: 'dependencies | "$(Agent.OS)"'
          restoreKeys: |
             dependencies | "$(Agent.OS)"
             dependencies
          path: $(cmake_prefix)
          cacheHitVar: DEPENDENCIES_RESTORED

      - task: PowerShell@2
        displayName: Build dependencies
        condition: and(ne(variables.DEPENDENCIES_RESTORED, 'true'), eq(variables['Agent.OS'], 'Windows_NT'))
        inputs:
          filePath: 'install_dependencies.ps1'
          arguments: '-config $(buildConfiguration) -build_dir $(build_dir) -toolset $(toolset)'
          errorActionPreference: 'continue'
          ignoreLASTEXITCODE: true
          pwsh: true
          workingDirectory: '$(System.DefaultWorkingDirectory)'

      - task: CMake@1
        displayName: Generate CMake project
        inputs:
          workingDirectory: '$(build_dir)'
          cmakeArgs: >-
            ${{join(common_cmake_args, ' ')}}
            ${{join(platform_cmake_args, ' ')}}

      - task: VSBuild@1
        displayName: Compile solution
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          maximumCpuCount: true

      - task: Xcode@5
        condition: eq(variables['Agent.OS'], 'Darwin')
        inputs:
          actions: 'build test'
          packageApp: false
          destinationPlatformOption: 'macOS'
          publishJUnitResults: true

      - task: VSTest@2
        displayName: Test solution
        condition: and(eq(variables.DEPENDENCIES_RESTORED, 'true'), eq(variables['Agent.OS'], 'Windows_NT'))
        inputs:
          testSelector: 'testAssemblies'
          runSettingsFile: '$(Build.SourcesDirectory)/azure_test.runsettings'
          testAssemblyVer2: |
            bin\Windows\Test*.exe
            !**\*TestAdapter.dll
            !**\obj\**
          searchFolder: '$(build_dir)'
          pathtoCustomTestAdapters: '$(VS_path)\Common7\IDE\Extensions\em3ozjcu.15r'
          testRunTitle: 'Native tests'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          diagnosticsEnabled: true
          runInParallel: false
          collectDumpOn: 'onAbortOnly'
          rerunFailedTests: True
          rerunFailedThreshold: '30'
          rerunFailedTestCasesMaxLimit: '5'
          rerunMaxAttempts: '3'
