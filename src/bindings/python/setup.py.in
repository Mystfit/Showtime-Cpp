import os, platform
from distutils.core import DEBUG
from setuptools import setup, find_packages, Extension
from setuptools.command.build_ext import build_ext as _build_ext
from distutils.command.build import build as _build
from setuptools.command.install import install as _install

class build(_build):
    sub_commands = [('build_ext', _build.has_ext_modules),
                    ('build_py', _build.has_pure_modules),
                    ('build_clib', _build.has_c_libraries),
                    ('build_scripts', _build.has_scripts)]


class install(_install):
    def run(self):
        self.run_command('build_ext')
        self.do_egg_install()


class build_ext(_build_ext):
    def initialize_options(self):
        _build_ext.initialize_options(self)
        self.swig = "${SWIG_EXECUTABLE}"


sources = list(filter(None, "${PYTHON_SWIG_INTERFACE}".split(';')))
extra_compile_args = list(filter(None, "${ZST_FLAGS}".split(';')))
extra_compile_args += list(filter(None, ["-D" + flag for flag in "${ZST_DEFINITIONS}".split(';')]))
extra_link_args = list(filter(None, "${ZST_LINK_FLAGS}".split(';')))
runtimes = list(filter(None, "${ZST_RUNTIMES}".split(';')))
libraries = list(filter(None, "${ZST_LIBS}".split(';')))

include_dirs = list(filter(None, "${ZST_INCLUDE_DIRS}".split(';')))
build_library_dirs = list(filter(None, "${ZST_BUILD_LIB_DIRS}".split(';')))
runtime_library_dirs = list(filter(None, "${ZST_RUNTIME_LIB_DIRS}".split(';')))
extra_link_args += ['-R' + d for d in runtime_library_dirs]

print("Compiling Showtime python C extension")
print("sources: {}".format(sources))
print("extra_compile_args: {}".format(extra_compile_args))
print("extra_link_args: {}".format(extra_link_args))
print("runtimes: {}".format(runtimes))
print("libraries: {}".format(libraries))
print("Build library_dirs: {}".format(build_library_dirs))
print("Runtime library_dirs: {}".format(runtime_library_dirs))
print("include_dirs: {}".format(include_dirs))

if platform.system() == 'Windows':
  runtimes += [runtime.replace('.lib', '.dll') for runtime in runtimes]
  runtimes = [os.path.normpath(x) for x in runtimes]

showtime_module = Extension('_showtime',
    language='c++',
    sources=sources,
    include_dirs=include_dirs,
    library_dirs=build_library_dirs,
    libraries=libraries,
    extra_compile_args=extra_compile_args,
    extra_link_args=extra_link_args,
    swig_opts=[
      '-c++', 
      '-outdir', '${CMAKE_SWIG_OUTDIR}'
    ] + ['-I' + x for x in include_dirs]
)

# Move into the python build dir so we can pick up our showtime interface
if os.path.dirname(__file__):
  os.chdir(os.path.dirname(__file__))

setup (cmdclass={'build_ext': build_ext, 'build':build},
  name = 'showtime',
  version = '${SHOWTIME_VERSION}',
  author      = "Byron  Mallett",
  description = """Python bindings for Showtime""",
  py_modules=['showtime'],
  data_files=runtimes,
  ext_modules = [showtime_module],
  zip_safe=False
)
