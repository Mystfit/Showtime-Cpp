//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ZstPlug : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ZstPlug(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZstPlug obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ZstPlug() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          showtime_dotnetPINVOKE.delete_ZstPlug(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ZstURI get_URI() {
    global::System.IntPtr cPtr = showtime_dotnetPINVOKE.ZstPlug_get_URI(swigCPtr);
    ZstURI ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZstURI(cPtr, false);
    return ret;
  }

  public void attach_recv_callback(PlugCallback callback) {
    showtime_dotnetPINVOKE.ZstPlug_attach_recv_callback(swigCPtr, PlugCallback.getCPtr(callback));
  }

  public void destroy_recv_callback(PlugCallback callback) {
    showtime_dotnetPINVOKE.ZstPlug_destroy_recv_callback(swigCPtr, PlugCallback.getCPtr(callback));
  }

  public void fire() {
    showtime_dotnetPINVOKE.ZstPlug_fire(swigCPtr);
  }

  public virtual void recv(SWIGTYPE_p_msgpack__object obj) {
    showtime_dotnetPINVOKE.ZstPlug_recv(swigCPtr, SWIGTYPE_p_msgpack__object.getCPtr(obj));
    if (showtime_dotnetPINVOKE.SWIGPendingException.Pending) throw showtime_dotnetPINVOKE.SWIGPendingException.Retrieve();
  }

}
