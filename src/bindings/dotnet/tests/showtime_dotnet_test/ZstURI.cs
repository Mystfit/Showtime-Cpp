//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ZstURI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ZstURI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZstURI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ZstURI() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          showtime_dotnetPINVOKE.delete_ZstURI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static ZstURI create(string performer, string instrument, string name, ZstURI.Direction direction) {
    global::System.IntPtr cPtr = showtime_dotnetPINVOKE.ZstURI_create(performer, instrument, name, (int)direction);
    ZstURI ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZstURI(cPtr, false);
    return ret;
  }

  public static void destroy(ZstURI uri) {
    showtime_dotnetPINVOKE.ZstURI_destroy(ZstURI.getCPtr(uri));
  }

  public string performer() {
    string ret = showtime_dotnetPINVOKE.ZstURI_performer(swigCPtr);
    return ret;
  }

  public string instrument() {
    string ret = showtime_dotnetPINVOKE.ZstURI_instrument(swigCPtr);
    return ret;
  }

  public string name() {
    string ret = showtime_dotnetPINVOKE.ZstURI_name(swigCPtr);
    return ret;
  }

  public ZstURI.Direction direction() {
    ZstURI.Direction ret = (ZstURI.Direction)showtime_dotnetPINVOKE.ZstURI_direction(swigCPtr);
    return ret;
  }

  public string to_char() {
    string ret = showtime_dotnetPINVOKE.ZstURI_to_char(swigCPtr);
    return ret;
  }

  public static ZstURI from_str(string s) {
    ZstURI ret = new ZstURI(showtime_dotnetPINVOKE.ZstURI_from_str(s), true);
    return ret;
  }

  public enum Direction {
    IN_JACK = 0,
    OUT_JACK
  }

}
