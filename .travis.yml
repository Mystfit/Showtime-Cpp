language: cpp

branches:
  only:
  - master
  - develop
  - travis

sudo: false 

matrix:
  include:
    - os: linux
      dist: xenial
    - os: osx
      osx_image: xcode10.1

compiler:
  - gcc
  - clang

addons: &common_build
  apt:
    packages:
      - curl
  homebrew:
    brewfile: true
    casks:
    - dotnet-sdk
    update: true

env:
  global:
  - BUILD_FOLDER=$TRAVIS_BUILD_DIR
  - GENERATOR="Unix Makefiles"
  matrix:
  - BUILD_TYPE=Debug
  - BUILD_TYPE=Release

before_install:
  # Set common env variables
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      export PREFIX=/usr/local;
      echo $(which brew);
      echo $PATH;
    fi

  # Create linuxbrew prefix
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export PREFIX=/home/linuxbrew/.linuxbrew;
    fi

  # Set prefix search path to homebrew folder for library discovery
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_PREFIX_PATH=$PREFIX;${CMAKE_PREFIX_PATH}"

install:
  # Output something every 10 minutes or Travis kills the job
  - while sleep 9m; do echo "=====[ $SECONDS seconds still running ]====="; done &

  # Install linuxbrew dependencies
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export PATH=$PREFIX/bin:$PREFIX/sbin:$PATH;
      export MANPATH=$PREFIX/share/man:$MANPATH;
      export INFOPATH=$PREFIX/share/info:$INFOPATH;
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)";
      hash -r;
      echo $(which brew);
      echo $PATH;
    fi

  # Install homebrew dependencies
  - brew update
  - brew bundle || true

  # Kill background sleep loop
  - kill %1

script:
  # Set installation prefix
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_INSTALL_PREFIX=$BUILD_FOLDER/install"

  # Set prefix search path to homebrew folder for library discovery
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_PREFIX_PATH=$PREFIX;${CMAKE_PREFIX_PATH}"

  # Python bindings
  - GENERATOR_ARGS="$GENERATOR_ARGS -DBINDINGS_PYTHON=ON -DBINDINGS_PYTHON_TESTS=ON -DPYTHON_EXECUTABLE=$PYTHON_BIN"

  # Shared and static libraries
  - GENERATOR_ARGS="$GENERATOR_ARGS -DBUILD_SHARED=ON -DBUILD_STATIC=ON"

  # Build and install project
  - cmake -H$BUILD_FOLDER -B$BUILD_FOLDER/build -G "$GENERATOR" $GENERATOR_ARGS
  - cmake --build $BUILD_FOLDER/build --config $CONFIG
  - cmake --build $BUILD_FOLDER/build --target install --config $CONFIG

  # Run tests
  - pushd $BUILD_FOLDER/build
  - ctest -C $CONFIG --output-on-fail --no-compress-output -T Test --timeout 320
