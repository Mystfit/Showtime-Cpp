language: cpp

branches:
  only:
  - master
  - develop
  - travis

sudo: required 

env:
  global:
  - BUILD_FOLDER=$TRAVIS_BUILD_DIR
  - GENERATOR="Unix Makefiles"
  - Boost_USE_LOCAL=1
  - CMAKE_PATH=$TRAVIS_BUILD_DIR/cmake

matrix:
  include:
    # GCC 6
    - env: BUILD_TYPE=Debug PY_VER=python2
      os: linux
      dist: trusty
      compiler:
        - clang
        - gcc
      addons: &common_build
        apt:
          packages:
            - gcc-6 
            - g++-6
            - clang
            - build-essential
            - gawk
            - curl 
            - file
            - git
            - python-setuptools
            - locales 
          sources:
            - ubuntu-toolchain-r-test

    - env: BUILD_TYPE=Debug PY_VER=python3
      os: linux
      dist: trusty
      compiler:
        - clang
        - gcc
      addons: *common_build

    - env: BUILD_TYPE=Release PY_VER=python2
      os: linux
      dist: trusty
      compiler:
        - clang
        - gcc
      addons: *common_build

    - env: BUILD_TYPE=Release PY_VER=python3
      os: linux
      dist: trusty
      compiler:
        - clang
        - gcc
      addons: *common_build

    # XCode 9.1
    - env: BUILD_TYPE=Debug PY_VER=python2 
      os: osx
      osx_image: xcode9.2
      compiler: clang

    - env: BUILD_TYPE=Debug PY_VER=python3
      os: osx
      osx_image: xcode9.2
      compiler: clang

    - env: BUILD_TYPE=Release PY_VER=python2
      os: osx
      osx_image: xcode9.2
      compiler: clang

    - env: BUILD_TYPE=Release PY_VER=python3
      os: osx
      osx_image: xcode9.2
      compiler: clang

before_install:
  # Set common env variables
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      export PREFIX=/usr/local
      echo $(which brew);
      echo $PATH;
    fi

  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export PREFIX=/home/linuxbrew/.linuxbrew;
    fi

  # Set locale flags
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo echo "LC_ALL=en_US.UTF-8" >> /etc/environment;
      sudo echo "LC_ALL=en_US.UTF-8" >> /etc/environment;
      sudo echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen;
      sudo echo "LANG=en_US.UTF-8" > /etc/locale.conf;
      sudo locale-gen en_US.UTF-8;
    fi

  # Install CMake 3.12 on Linux
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      CMAKE_FILE=cmake-3.12.0-rc3-Linux-x86_64;
      wget https://cmake.org/files/v3.12/${CMAKE_FILE}.sh --quiet;
      export CMAKE_PATH=$BUILD_FOLDER/cmake;
      sudo bash ${CMAKE_FILE}.sh --skip-license --prefix=$CMAKE_PATH;
    fi

  # OSX uses downloaded CMake and local boost
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      export CMAKE_PATH=$(brew --prefix);
      export Boost_USE_LOCAL=1;
    fi

  # CMake paths
  - export CMAKE_BIN=$CMAKE_PATH/bin/cmake;
  - export CTEST_BIN=$CMAKE_PATH/bin/ctest;

install:
  # Output something every 10 minutes or Travis kills the job
  - while sleep 9m; do echo "=====[ $SECONDS seconds still running ]====="; done &

  # Install linuxbrew dependencies
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export PATH=$PREFIX/bin:$PREFIX/sbin:$PATH;
      export MANPATH=$PREFIX/share/man:$MANPATH;
      export INFOPATH=$PREFIX/share/info:$INFOPATH;
      export CC=gcc-6;
      export CXX=g++-6;
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)";
      hash -r;
      echo $(which brew);
      echo $PATH;
    fi

  # Install homebrew dependencies
  - brew update 
  - brew bundle

  # Kill background sleep loop
  - kill %1

script:
  - mkdir $BUILD_FOLDER/build
  - mkdir $BUILD_FOLDER/install

  # We don't need to use Hunter on Windows (we have linuxbrew)
  - GENERATOR_ARGS="-DUSE_HUNTER=OFF";

  # Verbose makefiles
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_VERBOSE_MAKEFILE:BOOL=OFF"

  # Set installation prefix
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_INSTALL_PREFIX=$BUILD_FOLDER/install"

  # Set linux toolchain
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_TOOLCHAIN_FILE=$BUILD_FOLDER/.travis/travis_linux_toolchain.cmake";
    fi

  # If we're using local boost, then set CMake vars to set correct target names
  - if [ $Boost_USE_LOCAL ]; then GENERATOR_ARGS="$GENERATOR_ARGS -DBoost_USE_LOCAL=ON"; fi

  # Set prefix search path to homebrew folder for library discovery
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_PREFIX_PATH=$PREFIX;${CMAKE_PREFIX_PATH} -DBUILD_MEMLEAK_TEST=OFF"

  # Python bindings
  - PYTHON_BIN=$(which $PY_VER)
  - echo "Python path is $PYTHON_BIN"
  - GENERATOR_ARGS="$GENERATOR_ARGS -DBINDINGS_PYTHON=ON -DBINDINGS_PYTHON_TESTS=ON -DPYTHON_EXECUTABLE=$PYTHON_BIN"

  # Build and install project
  - $CMAKE_BIN -H$BUILD_FOLDER -B$BUILD_FOLDER/build -G "$GENERATOR" $GENERATOR_ARGS
  - $CMAKE_BIN --build $BUILD_FOLDER/build --config $CONFIG
  - sudo $CMAKE_BIN --build $BUILD_FOLDER/build --target install --config $CONFIG

  # Run tests
  - pushd $BUILD_FOLDER/build
  - $CTEST_BIN -C Debug -V --output-on-fail --timeout 320
