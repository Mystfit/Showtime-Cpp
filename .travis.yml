language: cpp

branches:
  only:
  - master
  - develop
  - travis

sudo: required 

env:
  global:
  - BUILD_FOLDER=$TRAVIS_BUILD_DIR
  - GENERATOR="Unix Makefiles"
  - USE_LOCAL_BOOST=1
  - CMAKE_PATH=$TRAVIS_BUILD_DIR/cmake

matrix:
  include:
    # GCC 6
    - env: BUILD_TYPE=Debug PY_VER=python2
      os: linux
      dist: trusty
      addons: &common_build
        apt:
          packages: 
            - build-essential
            - gawk
            - curl 
            - file
            - git
            - python-setuptools
            - locales 
          sources:
            - ubuntu-toolchain-r-test

    - env: BUILD_TYPE=Debug PY_VER=python3
      os: linux
      dist: trusty
      addons: *common_build

    - env: BUILD_TYPE=Release PY_VER=python2
      os: linux
      dist: trusty
      addons: *common_build

    - env: BUILD_TYPE=Release PY_VER=python3
      os: linux
      dist: trusty
      addons: *common_build

    # XCode 9.1
    - env: BUILD_TYPE=Debug PY_VER=python2 
      os: osx
      osx_image: xcode9.2
      compiler: clang

    - env: BUILD_TYPE=Debug PY_VER=python3
      os: osx
      osx_image: xcode9.2
      compiler: clang

    - env: BUILD_TYPE=Release PY_VER=python2
      os: osx
      osx_image: xcode9.2
      compiler: clang

    - env: BUILD_TYPE=Release PY_VER=python3
      os: osx
      osx_image: xcode9.2
      compiler: clang

before_install:
  # Set common env variables
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      export COMPILER=clang++;
      export COMPILER_C=clang;
      export HOMEBREW_PATH=/usr/local;
    fi

  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export HOMEBREW_PATH=/home/linuxbrew/.linuxbrew;
    fi

  # Set locale flags
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo echo "LC_ALL=en_US.UTF-8" >> /etc/environment;
      sudo echo "LC_ALL=en_US.UTF-8" >> /etc/environment;
      sudo echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen;
      sudo echo "LANG=en_US.UTF-8" > /etc/locale.conf;
      sudo locale-gen en_US.UTF-8;
    fi

  # Install CMake 3.11 on Linux
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      wget https://cmake.org/files/v3.11/cmake-3.11.0-rc2-Linux-x86_64.sh --quiet;
      export CMAKE_PATH=$BUILD_FOLDER/cmake;
      sudo bash cmake-3.11.0-rc2-Linux-x86_64.sh --skip-license --prefix=$CMAKE_PATH;
    fi

  # Install CMake 3.11 on OSX
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      mkdir $CMAKE_PATH;
      wget https://cmake.org/files/v3.11/cmake-3.11.0-rc2-Darwin-x86_64.tar.gz --quiet;
      tar -xf cmake-3.11.0-rc2-Darwin-x86_64.tar.gz -C $CMAKE_PATH --strip-components=1;
      export CMAKE_PATH=$CMAKE_PATH/CMake.app/Contents;
    fi

  # Set local boost on OSX
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then export USE_LOCAL_BOOST=1; fi

  # CMake paths
  - export CMAKE_BIN=$CMAKE_PATH/bin/cmake;
  - export CTEST_BIN=$CMAKE_PATH/bin/ctest;

install:
  # Output something every 10 minutes or Travis kills the job
  - while sleep 9m; do echo "=====[ $SECONDS seconds still running ]====="; done &

  # Install linuxbrew dependencies
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export PATH="$HOMEBREW_PATH/bin:$HOMEBREW_PATH/sbin:$PATH";
      export MANPATH="$HOMEBREW_PATH/share/man:$MANPATH";
      export INFOPATH="$HOMEBREW_PATH/share/info:$INFOPATH";
      $BUILD_FOLDER/.travis/install_linuxbrew_dependencies.sh;
    fi

  # Install homebrew dependencies
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then bash $BUILD_FOLDER/.travis/install_homebrew_dependencies.sh; fi
  
  # Kill background sleep loop
  - kill %1

script:
  - mkdir $BUILD_FOLDER/build
  - mkdir $BUILD_FOLDER/install

  # We don't need to use Hunter on Windows (we have linuxbrew)
  - GENERATOR_ARGS="-DUSE_HUNTER=OFF";

  # Verbose makefiles
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_VERBOSE_MAKEFILE:BOOL=OFF"

  # Set installation prefix
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_INSTALL_PREFIX=$BUILD_FOLDER/install"

  # Set linux toolchain
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_TOOLCHAIN_FILE=$BUILD_FOLDER/.travis/travis_linux_toolchain.cmake";
    fi

  # If we're using local boost, then set CMake vars to set correct target names
  - if [ $USE_LOCAL_BOOST ]; then GENERATOR_ARGS="$GENERATOR_ARGS -DUSE_LOCAL_BOOST=ON"; fi

  # Set prefix search path to homebrew folder for library discovery
  - GENERATOR_ARGS="$GENERATOR_ARGS -DCMAKE_PREFIX_PATH=$HOMEBREW_PATH;${CMAKE_PREFIX_PATH}"

  # Python bindings
  - PYTHON_BIN=$(which $PY_VER)
  - echo "Python path is $PYTHON_BIN"
  - GENERATOR_ARGS="$GENERATOR_ARGS -DBINDINGS_PYTHON=ON -DBINDINGS_PYTHON_TESTS=ON -DPYTHON_EXECUTABLE=$PYTHON_BIN"

  # Build and install project
  - $CMAKE_BIN -H$BUILD_FOLDER -B$BUILD_FOLDER/build -G "$GENERATOR" $GENERATOR_ARGS
  - $CMAKE_BIN --build $BUILD_FOLDER/build --target --config $CONFIG
  - sudo $CMAKE_BIN --build $BUILD_FOLDER/build --target INSTALL --config $CONFIG

  # Run tests
  - $CTEST_BIN -C Debug -V --build-run-dir "%BUILD_FOLDER%/build" --output-on-fail --timeout 320
